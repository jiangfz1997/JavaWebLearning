/*JS是弱类型， Java是强类型
*   弱类型是类型可变
*   强类型是定义变量时， 类型已经确定且不可变
*
* 特点：
* 1.交互性（信息动态交互）
* 2.安全性（不可直接访问本地硬盘）
* 3.跨平台性
*
*
* 使用方法：1.在head/body标签中， 用script标签来书写js代码
         2.使用script标签引入单独的JavaScript代码（见结合方式2）

         script标签可以用来定义js代码，也可以用来引入js文件，但两个功能需二选一
         多个script标签从上到下顺序执行

* 变量类型：
*   数值类型： number
*   字符串类型： string
*   对象类型： object
*   布尔类型： boolean
*   函数类型： function
*
* JS中特殊的值：
*   undefined： 未定义， 所有js变量未赋初始值时都是undfined
*   null：空
*   NAN: not a number 非数字， 非数值
*
*
* 关系运算：
*   等于： == 简单的字面值比较
*   全等于：=== 除了字面值比较外还会比较两个变量的数据类型
*
* 逻辑运算：
*   且运算：  &&
*   或运算：  ||
*   取反：    ！
* JS中所有的变量都可以作为一个boolean类型变量去用
* 0、null、undefined、”“均为false
* （逻辑运算.js）
* && 且运算：
*       1.当表达式全为真时，返回最后一个表达式的值
*       2.当表达式有一个为假时， 返回第一个为假的表达式
*
* || 或运算:
*       1.当表达式全为假时，返回最后一个表达式的值
*       2.只要有一个表达式为真，返回第一个为真的表达式
*
* 运算可短路，从而省略第二个表达式的结果
*
*
*
* JS数组：
* 数组定义方式： var 数组名 = [];
*
* JS函数定义：
* 方式:
*   第一种：可以用function关键字来定义函数
*       function 函数名（形参）{
*           函数体
*       }
*       定义返回值： 直接在函数内定义返回值
*   第二种：var 函数名 = function{形参列表}{函数体}
*
* JS中不允许函数重载，第二次定义会覆盖上一次的函数定义
*
*
* Arguments隐形参数（只在function函数内）
*   在function函数中不需要定义，却可以直接用来获取所有参数的变量，类似可变长参数
*
* JS自定义对象：Object形式的自定义对象
*               var 变量名 = new Object();
*               变量名.属性名 = 值；
*               变量名.函数名 = function(){}
*
*             对象的访问：
*               变量名.属性/函数名();
*
*
*            {}花括号形式的自定义对象：
*               var 变量名 = {
*                   属性名：值
*                   函数名：function(){}
*               };
* */

